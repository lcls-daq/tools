#!/usr/bin/python

from ProcMgr import ProcMgr
from optparse import OptionParser
from string import atoi
import os.path
import sys

command_list = [ 'start', 'stop', 'status' ]

usage = "usage: %prog { start | stop | status } configfile [OPTION]... [UNIQUEID]..."

parser = OptionParser(usage=usage)

parser.add_option("-v", "--verbose",
                  action="store_true", dest="verbose", default=False,
                  help="be verbose")

parser.add_option("-p", type="int", dest="platform", metavar="<platform>",
                  default=-1, help="platform number")

parser.add_option("-c", type="int", dest="coresize", metavar="<coresize>",
                  default=0, help="max core dump size (default=0)")

parser.add_option("-t", type="int", dest="sigint_delay", metavar="<secs>",
                  default=1, help="for stop: delay between SIGINT and SIGTERM (default=1)")

parser.add_option("-o", type="string", dest="logpath", metavar="<logpath>",
                  default="/reg/g/pcds/pds/logfiles",
                  help="output directory (default=/reg/g/pcds/pds/logfiles)")

(options, args) = parser.parse_args()

if len(args) < 2:
    parser.error("at least two arguments required")

configfile = args.pop(1)
command = args.pop(0)

if not command in command_list:
    parser.error ("unknown command: %s" % command)

if os.path.isfile(configfile) != 1:
    parser.error ("file not found: %s" % configfile)

if command == 'start':

    # start

    try:
        ProcMgr(configfile, options.platform).start(args, options.verbose, options.logpath, options.coresize)
    except IOError:
        print "%s: i/o error accessing file %s" % (sys.argv[0], configfile)
        sys.exit(1)
    else:
        sys.exit(0)

elif command == 'status':

    # status

    try:
        ProcMgr(configfile,options.platform).status(args, options.verbose)
    except IOError:
        print "%s: i/o error accessing file %s" % (sys.argv[0], configfile)
        sys.exit(1)
    else:
        sys.exit(0)

elif command == 'stop':

    # stop

    try:
        ProcMgr(configfile,options.platform).stop(args, options.verbose,
                options.sigint_delay)
    except IOError:
        print "%s: i/o error accessing file %s" % (sys.argv[0], configfile)
        sys.exit(1)
    else:
        sys.exit(0)

else:

    # should not get here
    parser.error ("invalid command")

