# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("pds-rhel5-slave", "botbuild"), BuildSlave("pds-rhel6-slave", "botbuild"), BuildSlave("pds-rhel7-slave", "botbuild")]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 29989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes
# from buildbot.changes.svnpoller import SVNPoller
# source_code_svn_url='https://svn.myproject.org/bluejay/trunk'
# svn_poller = SVNPoller(
#                    svnurl=source_code_svn_url,
#                    pollinterval=60*60, # seconds
#                    histmax=10,
#                    svnbin='/usr/bin/svn',
## )
# c['sources'] = [ svn_poller ]

####### SCHEDULERS

## configure the Schedulers

#from buildbot.scheduler import Scheduler
from buildbot.scheduler import Nightly
c['schedulers'] = []
c['schedulers'].append(Nightly(name='pdsapp nightly',
                       builderNames=['pdsapp-rhel5', 'pdsapp-rhel6', 'pdsapp-rhel7'],
                       hour=3,
                       minute=0))
c['schedulers'].append(Nightly(name='ami nightly',
                       builderNames=['ami-rhel5', 'ami-rhel6', 'ami-rhel7'],
                       hour=4,
                       minute=0))

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
cvsmodule = "buildbot"

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import WarningCountingShellCommand, TreeSize
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import WithProperties
from buildbot.steps.python_twisted import Trial
from buildbot.status.builder import SUCCESS, WARNINGS, FAILURE, STDOUT, STDERR

import re

class ErrorCheckCompile(WarningCountingShellCommand):

    name = "compile"
    haltOnFailure = 1
    flunkOnFailure = 1
    description = ["compiling"]
    descriptionDone = ["compile"]
    command = ["make", "all"]

    OFFprogressMetrics = ('output',)
    # things to track: number of files compiled, number of directories
    # traversed (assuming 'make' is being used)

    # overload createSummary to add error log
    def createSummary(self, log):
        errors = []
        # example error string: "make[5]: *** No rule to make target"
        errorPattern = re.compile('make\[\d+\]: \*\*\* ')
        for line in log.getText().split("\n"):
            if errorPattern.match(line):
                errors.append(line)
        if len(errors) > 0:
            # create "errors" log
            self.addCompleteLog("errors", "\n".join(errors) + "\n")

        WarningCountingShellCommand.createSummary(self, log)

    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE

        # if "errors" log exists, return FAILURE
        try:
            errlog = self.getLog("errors")
        except:
            # log not found
            pass
        else:
            return FAILURE

        if self.warnCount:
            return WARNINGS
        return SUCCESS

######### pds, pdsapp, and timetool ########

checkoutPDSAPP = SVN(svnurl = 'http://pswww.slac.stanford.edu/svn-readonly/pdsrepo/release/trunk',
               mode = "clobber",
               username = "foo",
               password = "bar",
               haltOnFailure = True )

# compile
makeall = ErrorCheckCompile(name = "build.sh",
                  command = ["/bin/bash", "-e", "tools/scripts/build.sh"],
                  haltOnFailure = True,
                  description = "compiling",
                  descriptionDone = "compile")

# compile with --no32 flag
makeallno32 = ErrorCheckCompile(name = "build.sh__no32",
                  command = ["/bin/bash", "-e", "tools/scripts/build.sh", "--no32"],
                  haltOnFailure = True,
                  description = "compiling",
                  descriptionDone = "compile")

treesize = TreeSize(description = ["sizing"],
                    descriptionDone = ["size"],
                    workdir = "build/build" )

tar = ShellCommand(command = ["/bin/bash", "-e", "tools/scripts/tarcreate.sh",
                              WithProperties("pdsbuild-%(buildername)s-b%(buildnumber)s-r%(got_revision)s.tar.gz")],
                   description = ["tarring"],
                   descriptionDone = ["tar"] )

chmod = ShellCommand(command = ["/bin/chmod", "444",
                                WithProperties("pdsbuild-%(buildername)s-b%(buildnumber)s-r%(got_revision)s.tar.gz")],
                     description = ["chmodding"],
                     descriptionDone = ["chmod"] )

move = ShellCommand(command = ["/bin/mv",
                               WithProperties("pdsbuild-%(buildername)s-b%(buildnumber)s-r%(got_revision)s.tar.gz"),
                               "../../../../out"],
                    description = ["moving"],
                    descriptionDone = ["move"] )

f1 = factory.BuildFactory()

f1.addStep(checkoutPDSAPP)
f1.addStep(makeall)
f1.addStep(treesize)
f1.addStep(tar)
f1.addStep(chmod)
f1.addStep(move)

f1no32 = factory.BuildFactory()

f1no32.addStep(checkoutPDSAPP)
f1no32.addStep(makeallno32)
f1no32.addStep(treesize)
f1no32.addStep(tar)
f1no32.addStep(chmod)
f1no32.addStep(move)

######### ami ##############################

checkoutAMI = SVN(svnurl = 'http://pswww.slac.stanford.edu/svn-readonly/pdsrepo/ami-release/trunk',
               mode = "clobber",
               username = "foo",
               password = "bar",
               haltOnFailure = True )

# compile
makeall = ErrorCheckCompile(name = "build_ami.sh",
                  command = ["/bin/bash", "-e", "tools/scripts/build_ami.sh"],
                  haltOnFailure = True,
                  description = "compiling",
                  descriptionDone = "compile")

treesize = TreeSize(description = ["sizing"],
                    descriptionDone = ["size"],
                    workdir = "build/build" )

tar = ShellCommand(command = ["/bin/bash", "-e", "tools/scripts/tarcreate_ami.sh",
                              WithProperties("pdsbuild-%(buildername)s-b%(buildnumber)s-r%(got_revision)s.tar.gz")],
                   description = ["tarring"],
                   descriptionDone = ["tar"] )

chmod = ShellCommand(command = ["/bin/chmod", "444",
                                WithProperties("pdsbuild-%(buildername)s-b%(buildnumber)s-r%(got_revision)s.tar.gz")],
                     description = ["chmodding"],
                     descriptionDone = ["chmod"] )

move = ShellCommand(command = ["/bin/mv",
                               WithProperties("pdsbuild-%(buildername)s-b%(buildnumber)s-r%(got_revision)s.tar.gz"),
                               "../../../../out"],
                    description = ["moving"],
                    descriptionDone = ["move"] )

f2 = factory.BuildFactory()

f2.addStep(checkoutAMI)
f2.addStep(makeall)
f2.addStep(treesize)
f2.addStep(tar)
f2.addStep(chmod)
f2.addStep(move)

b1 = {'name': "pdsapp-rhel5",
      'slavename': "pds-rhel5-slave",
      'builddir': "pdsapp-rhel5",
      'factory': f1,
      }
b2 = {'name': "pdsapp-rhel6",
      'slavename': "pds-rhel6-slave",
      'builddir': "pdsapp-rhel6",
      'factory': f1,
      }
b3 = {'name': "pdsapp-rhel7",
      'slavename': "pds-rhel7-slave",
      'builddir': "pdsapp-rhel7",
      'factory': f1,
      }
b4 = {'name': "ami-rhel5",
      'slavename': "pds-rhel5-slave",
      'builddir': "ami-rhel5",
      'factory': f2,
      }
b5 = {'name': "ami-rhel6",
      'slavename': "pds-rhel6-slave",
      'builddir': "ami-rhel6",
      'factory': f2no32,
      }
b6 = {'name': "ami-rhel7",
      'slavename': "pds-rhel7-slave",
      'builddir': "ami-rhel7",
      'factory': f2no32,
      }
c['builders'] = [b1, b2, b3, b4, b5, b6]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))
c['status'].append(html.WebStatus(http_port=8011,allowForce=True))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))

from buildbot.status.mail import MailNotifier
mn = MailNotifier(fromaddr="buildbot@SLAC.STANFORD.EDU",
                  extraRecipients=["pcds-daq-build-l@slac.stanford.edu"],
                  builders=['pdsapp-rhel5', 'pdsapp-rhel6', 'pdsapp-rhel7', 'ami-rhel5', 'ami-rhel6', 'ami-rhel7'],
                  lookup="SLAC.STANFORD.EDU")
c['status'].append(mn)

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(29988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "PCDS DAQ"
c['projectURL'] = "https://confluence.slac.stanford.edu/display/PCDS/PCDS+DAQ"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://psel501:8010/waterfall"
